package com.trendyol.shoppingcart.cart;import com.trendyol.shoppingcart.campaign.CampaignComponent;import com.trendyol.shoppingcart.category.CategoryComponent;import com.trendyol.shoppingcart.coupon.CouponComponent;import com.trendyol.shoppingcart.delivery.Calculator;import com.trendyol.shoppingcart.delivery.DeliveryCostCalculator;import com.trendyol.shoppingcart.discount.withcampaign.DiscountFactory;import com.trendyol.shoppingcart.discount.withcampaign.IDiscountStrategy;import com.trendyol.shoppingcart.discount.withcoupon.ApplyCouponFactory;import com.trendyol.shoppingcart.discount.withcoupon.ICouponStrategy;import com.trendyol.shoppingcart.product.ProductComponent;import com.trendyol.shoppingcart.utilities.Utils;import lombok.EqualsAndHashCode;import lombok.Getter;import lombok.Setter;import lombok.ToString;import java.util.*;@EqualsAndHashCode@ToString@Setter@Getterpublic class ShoppingCart {    private Map<ProductComponent, Integer> products;    private Map<CategoryComponent, Map<ProductComponent, Integer>> groupedProductsByCategory;    private CartResult result;    private Calculator deliveryCostCalculator;    public ShoppingCart() {        //to keep the products in the same order they were inserted        this.products = new LinkedHashMap<>();        this.groupedProductsByCategory = new LinkedHashMap<>();        this.result = new CartResult();    }    /**     * @param product     * @param quantity     */    public void addItem(ProductComponent product, int quantity) {        int previousQuantity = this.products.containsKey(product) ? this.products.get(product) : 0;        int currentQuantity = previousQuantity + quantity;        this.products.put(product, currentQuantity);        retrieveGroupedProductsByCategory();        result.setTotalPrice(totalPrice());    }    /**     * @param product     * @param quantity     */    public void removeItem(ProductComponent product, int quantity) {        int previousQuantity = this.products.containsKey(product) ? this.products.get(product) : 0;        int currentQuantity = previousQuantity - quantity;        if (currentQuantity == 0) {            this.products.remove(product);        } else {            this.products.replace(product, currentQuantity);        }        retrieveGroupedProductsByCategory();        result.setTotalPrice(totalPrice());    }    /**     *     */    private void retrieveGroupedProductsByCategory() {        for (Map.Entry<ProductComponent, Integer> entry : products.entrySet()) {            if (!this.groupedProductsByCategory.containsKey(entry.getKey().getCategory())) {                Map<ProductComponent, Integer> map = new LinkedHashMap<>();                map.put(entry.getKey(), entry.getValue());                this.groupedProductsByCategory.put(entry.getKey().getCategory(), map);            } else {                this.groupedProductsByCategory.get(entry.getKey().getCategory()).put(entry.getKey(), entry.getValue());            }        }    }    public int getNumberOfProduct() {        int numOfProduct = this.products.values().stream().mapToInt(i -> i).sum();        return numOfProduct;    }    public int getNumberOfDifferentProduct() {        int numOfDifferentProduct = this.products.keySet().size();        return numOfDifferentProduct;    }    public int getNumberOfDifferentCategory() {        int numOfDifferentCategory = this.groupedProductsByCategory.keySet().size();        return numOfDifferentCategory;    }    /**     * @return totalPrice     */    public double totalPrice() {        double totalPrice = 0;        for (ProductComponent items : this.products.keySet()) {            totalPrice += items.priceForQuantity(this.products.get(items));        }        return totalPrice;    }    public void applyDiscount(List<CampaignComponent> discount)  {        List<IDiscountStrategy> discountStrategies = DiscountFactory.getDiscountStrategy(discount);        double totalPrice = totalPrice();        double maxDiscount = 0;        double resultStrategyDiscount = 0;        double totalAmountAfterDiscount=0;        //todo O(n^3)        for (IDiscountStrategy strategy : discountStrategies) {            resultStrategyDiscount = strategy.calculateDiscount(this.groupedProductsByCategory);            if (totalPrice > resultStrategyDiscount) {                if (maxDiscount < resultStrategyDiscount)                    maxDiscount = resultStrategyDiscount;            }        }        totalAmountAfterDiscount=totalPrice-maxDiscount;        this.result.setTotalDiscountWithCampaign(maxDiscount);        this.result.setTotalAmountAfterDiscount(totalAmountAfterDiscount);    }    public void applyCoupon(CouponComponent coupon) {        ICouponStrategy couponStrategy= ApplyCouponFactory.getApplyCoupon(coupon);        // todo this filed        double totalPrice = result.getTotalAmountAfterDiscount()==0?totalPrice():result.getTotalAmountAfterDiscount();        assert couponStrategy != null;        double couponDiscount=couponStrategy.calculateCouponDiscount(totalPrice);        this.result.setTotalDiscountWithCoupon(totalPrice-couponDiscount);        this.result.setTotalAmountAfterDiscount(couponDiscount);    }    public void deliveryCost(){        deliveryCostCalculator= DeliveryCostCalculator.getInstance(3,3,2.99);        double deliveryCost=deliveryCostCalculator.calculateFor(this);        this.result.setDeliveryCost(Utils.formatTwoDigitsAfterComma(deliveryCost));    }    public void print() {        this.result.setGroupedProductsByCategory(this.groupedProductsByCategory);        String r = this.result.toZtring();        System.out.println(r);    }    /**     * @return     */    public boolean isEmpty() {        return getProducts().isEmpty();    }    public Map<ProductComponent, Integer> getProducts() {        return this.products;    }    public Map<CategoryComponent, Map<ProductComponent, Integer>> getGroupedProductsByCategory() {        return this.groupedProductsByCategory;    }}