package com.trendyol.shoppingcart.cart;import com.trendyol.shoppingcart.campaign.ICampaign;import com.trendyol.shoppingcart.category.ICategory;import com.trendyol.shoppingcart.delivery.Calculator;import com.trendyol.shoppingcart.delivery.DeliveryCostCalculator;import com.trendyol.shoppingcart.discount.DiscountFactory;import com.trendyol.shoppingcart.discount.IDiscountStrategy;import com.trendyol.shoppingcart.campaign.Campaign;import com.trendyol.shoppingcart.product.IProduct;import com.trendyol.shoppingcart.utilities.Utils;import lombok.EqualsAndHashCode;import lombok.Getter;import lombok.Setter;import lombok.ToString;import java.util.*;@EqualsAndHashCode@ToString@Setter@Getterpublic class ShoppingCart {    private Map<IProduct, Integer> products;    private Map<ICategory, Map<IProduct, Integer>> groupedProductsByCategory;    public CartResult getResult() {        return result;    }    public void setResult(CartResult result) {        this.result = result;    }    private CartResult result;    private Calculator deliveryCostCalculator;    public ShoppingCart() {        //to keep the products in the same order they were inserted        this.products = new LinkedHashMap<>();        this.groupedProductsByCategory = new LinkedHashMap<>();        this.result = new CartResult();    }    /**     * @param product     * @param quantity     */    public void addItem(IProduct product, int quantity) {        int previousQuantity = this.products.containsKey(product) ? this.products.get(product) : 0;        int currentQuantity = previousQuantity + quantity;        this.products.put(product, currentQuantity);        retrieveGroupedProductsByCategory();        result.setTotalPrice(totalPrice());    }    /**     * @param product     * @param quantity     */    public void removeItem(IProduct product, int quantity) {        int previousQuantity = this.products.containsKey(product) ? this.products.get(product) : 0;        int currentQuantity = previousQuantity - quantity;        if (currentQuantity == 0) {            this.products.remove(product);        } else {            this.products.replace(product, currentQuantity);        }        retrieveGroupedProductsByCategory();        result.setTotalPrice(totalPrice());    }    /**     *     */    public void retrieveGroupedProductsByCategory() {        for (Map.Entry<IProduct, Integer> entry : products.entrySet()) {            if (!this.groupedProductsByCategory.containsKey(entry.getKey().getCategory())) {                Map<IProduct, Integer> map = new LinkedHashMap<>();                map.put(entry.getKey(), entry.getValue());                this.groupedProductsByCategory.put(entry.getKey().getCategory(), map);            } else {                this.groupedProductsByCategory.get(entry.getKey().getCategory()).put(entry.getKey(), entry.getValue());            }        }    }    public int getNumberOfProduct() {        int numOfProduct = this.products.values().stream().mapToInt(i -> i).sum();        return numOfProduct;    }    public int getNumberOfDifferentProduct() {        int numOfDifferentProduct = this.products.keySet().size();        return numOfDifferentProduct;    }    public int getNumberOfDifferentCategory() {        int numOfDifferentCategory = this.groupedProductsByCategory.keySet().size();        return numOfDifferentCategory;    }    /**     * @return totalPrice     */    public double totalPrice() {        double totalPrice = 0;        for (IProduct items : this.products.keySet()) {            totalPrice += items.priceForQuantity(this.products.get(items));        }        return totalPrice;    }    public void applyDiscount(List<ICampaign> discount) {        List<IDiscountStrategy> discountStrategies = DiscountFactory.getDiscountStrategy(discount);        double totalPrice = totalPrice();        double maxDiscount = 0;        double resultStrategyDiscount = 0;        double totalAmountAfterDiscount=0;        for (IDiscountStrategy strategy : discountStrategies) {            resultStrategyDiscount = strategy.calculateDiscount(this.groupedProductsByCategory);            if (totalPrice > resultStrategyDiscount) {                if (maxDiscount < resultStrategyDiscount)                    maxDiscount = resultStrategyDiscount;            }        }        totalAmountAfterDiscount=totalPrice-maxDiscount;        this.result.setTotalDiscountWithCampaign(maxDiscount);        this.result.setTotalAmountAfterDiscount(totalAmountAfterDiscount);    }    public void applyCoupon() {    }    public void deliveryCost(){        deliveryCostCalculator= DeliveryCostCalculator.getInstance(3,3,2.99);        double deliveryCost=deliveryCostCalculator.calculateFor(this);        this.result.setDeliveryCost(Utils.formatTwoDigitsAfterComma(deliveryCost));    }    public void print() {        this.result.setGroupedProductsByCategory(this.groupedProductsByCategory);        String r = this.result.toZtring();        System.out.println(r);    }    /**     * @return     */    public boolean isEmpty() {        return getProducts().isEmpty();    }    public Map<IProduct, Integer> getProducts() {        return this.products;    }    public Map<ICategory, Map<IProduct, Integer>> getGroupedProductsByCategory() {        return this.groupedProductsByCategory;    }}